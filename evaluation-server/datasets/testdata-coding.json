[
  {
    "difficulty": "하",
    "question": "BookService에 책의 재고 수량을 증가시키는 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.increaseBookStock"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberController에 회원 프로필 조회 엔드포인트를 추가해줘",
    "answer": [
      "com.skax.library.controller.MemberController.getMemberProfile"
    ]
  },
  {
    "difficulty": "하",
    "question": "Loan 엔티티에 연체 여부를 확인하는 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Loan"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationService에 예약 취소 메서드 추가해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.cancelReservation"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryController에 카테고리 삭제 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.CategoryController.deleteCategory"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineService에 벌금 면제 로직을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.FineServiceImpl.waiveFine"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookController에 도서 검색 기능을 추가해줘",
    "answer": [
      "com.skax.library.controller.BookController.searchBooks"
    ]
  },
  {
    "difficulty": "하",
    "question": "Member 엔티티에 회원 등급 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Member"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanService에 대출 연장 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.extendLoan"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryService에 하위 카테고리 목록 조회 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.getSubCategories"
    ]
  },
  {
    "difficulty": "하",
    "question": "Book 엔티티에 출판사 정보 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Book"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberService에 비밀번호 변경 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.changePassword"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationController에 예약 목록 페이징 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.ReservationController.getReservationsWithPagination"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineController에 벌금 납부 내역 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.FineController.getFinePaymentHistory"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookServiceImpl에 베스트셀러 목록 조회 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.getBestSellerBooks"
    ]
  },
  {
    "difficulty": "중",
    "question": "대출 시 해당 도서의 재고를 감소시키는 로직을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.createLoan",
      "com.skax.library.service.impl.BookServiceImpl.updateBookStock"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 가입 시 이메일 중복 검사와 유효성 검증 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.registerMember",
      "com.skax.library.repository.MemberRepository"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 반납 시 연체료 계산 및 부과 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.returnBook",
      "com.skax.library.service.impl.FineServiceImpl.calculateAndCreateFine"
    ]
  },
  {
    "difficulty": "중",
    "question": "예약한 도서가 대출 가능하게 되면 회원에게 알림을 보내는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.notifyBookAvailable",
      "com.skax.library.event.ReservationEvent"
    ]
  },
  {
    "difficulty": "중",
    "question": "사용자가 도서를 대출할 때 해당 도서의 예약 여부를 확인하는 로직을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.createLoan",
      "com.skax.library.service.impl.ReservationServiceImpl.checkReservationExists"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서 대출, 반납, 예약 시 통합 이벤트 로깅 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.service.impl.ReservationServiceImpl",
      "com.skax.library.config.EventLoggingConfig"
    ]
  },
  {
    "difficulty": "상",
    "question": "회원 등급에 따라 대출 가능 권수와 연체료 할인율을 다르게 적용하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.createLoan",
      "com.skax.library.service.impl.FineServiceImpl.calculateFine",
      "com.skax.library.config.MembershipConfig"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서 예약과 대출 시 동시성 문제를 해결하기 위한 락 메커니즘을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl",
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.config.LockingConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "카테고리 삭제 시 해당 카테고리와 연결된 모든 도서의 카테고리 정보를 업데이트하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.deleteCategory",
      "com.skax.library.service.impl.BookServiceImpl.updateBooksCategory"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 상세 정보 조회 시 해당 도서의 현재 대출 및 예약 상태도 함께 제공하는 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.BookController.getBookDetail",
      "com.skax.library.service.impl.BookServiceImpl.getBookWithStatus"
    ]
  },
  {
    "difficulty": "하",
    "question": "Reservation 엔티티에 예약 만료일 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Reservation"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookService에 도서 ISBN으로 검색하는 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.findBookByISBN"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineService에 연체료 할인 적용 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.FineServiceImpl.applyDiscount"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberController에 회원 목록 조회 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.MemberController.getAllMembers"
    ]
  },
  {
    "difficulty": "하",
    "question": "Loan 엔티티에 반납 예정일 계산 메서드를 추가해줘",
    "answer": [
      "com.skax.library.model.Loan.calculateDueDate"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryService에 카테고리별 도서 수 조회 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.countBooksByCategory"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationController에 예약 취소 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.ReservationController.cancelReservation"
    ]
  },
  {
    "difficulty": "하",
    "question": "Book 엔티티에 대출 가능 여부 판단 메서드를 추가해줘",
    "answer": [
      "com.skax.library.model.Book.isAvailableForLoan"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberService에 회원 대출 이력 조회 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.getLoanHistory"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanController에 회원별 대출 현황 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.LoanController.getMemberLoans"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineController에 벌금 납부 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.FineController.payFine"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookController에 도서 추천 목록 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.BookController.getRecommendedBooks"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberService에 회원 이메일 변경 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.updateEmail"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryController에 상위 카테고리 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.CategoryController.getParentCategories"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanService에 연체 도서 목록 조회 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.getOverdueLoans"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 등록 시 해당 카테고리가 존재하는지 확인하고, 없으면 생성하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.createBook",
      "com.skax.library.service.impl.CategoryServiceImpl.findOrCreateCategory"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 탈퇴 시 해당 회원의 대출 및 예약 정보를 모두 처리하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.deleteMember",
      "com.skax.library.service.impl.LoanServiceImpl.handleLoansForDeletedMember"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 검색 결과를 카테고리별로 그룹화하여 제공하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.searchBooksGroupByCategory",
      "com.skax.library.controller.BookController.searchBooksByCategory"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원이 연체료를 납부하면 대출 가능 상태로 변경하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.FineServiceImpl.processFinePayment",
      "com.skax.library.service.impl.MemberServiceImpl.updateMemberStatus"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 예약 취소 시 대기 중인 다음 예약자에게 알림을 보내는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.cancelAndNotifyNext",
      "com.skax.library.event.ReservationEvent"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 정보 수정 시 변경 내역을 로깅하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.updateMember",
      "com.skax.library.event.MemberEvent"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서 추천 시스템을 구현하여 회원별 맞춤 도서 목록을 제공하는 기능을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.getRecommendedBooks",
      "com.skax.library.service.impl.LoanServiceImpl.getMemberLoanHistory",
      "com.skax.library.config.RecommendationConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "대출 가능한 도서만 검색하는 필터링 기능을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.findAvailableBooks",
      "com.skax.library.repository.BookRepository"
    ]
  },
  {
    "difficulty": "중",
    "question": "특정 기간 내에 가장 많이 대출된 도서 통계 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.getMostBorrowedBooks",
      "com.skax.library.repository.LoanRepository"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원별 연체 이력을 조회하고 경고 메일을 발송하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.getOverdueHistory",
      "com.skax.library.service.impl.FineServiceImpl.sendOverdueWarning"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 정보 수정 시 변경 이력을 기록하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.updateBook",
      "com.skax.library.event.BookEvent"
    ]
  },
  {
    "difficulty": "중",
    "question": "카테고리 이름 변경 시 연결된 모든 도서의 카테고리 이름도 함께 업데이트하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.renameCategory",
      "com.skax.library.service.impl.BookServiceImpl.updateBooksForCategoryRename"
    ]
  },
  {
    "difficulty": "상",
    "question": "시스템 전체에 걸쳐 도서 대출과 반납 프로세스에 대한 트랜잭션 관리 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.config.TransactionConfig"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationService에 특정 도서에 대한 예약 대기 순위 조회 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.getReservationQueue"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineController에 미납 벌금이 있는 회원 목록 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.FineController.getMembersWithUnpaidFines"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookService에 도서 폐기 처리 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.discardBook"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberController에 회원 검색 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.MemberController.searchMembers"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryService에 빈 카테고리 삭제 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.deleteEmptyCategory"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanController에 대출 기간 연장 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.LoanController.extendLoanPeriod"
    ]
  },
  {
    "difficulty": "하",
    "question": "Fine 엔티티에 납부 상태 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Fine"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationService에 예약 만료 처리 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.expireReservation"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookController에 신간 도서 목록 조회 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.BookController.getNewArrivals"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberService에 회원 활성화/비활성화 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.toggleMemberStatus"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryController에 카테고리 병합 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.CategoryController.mergeCategories"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanService에 자동 연장 가능 여부 확인 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.isEligibleForAutoRenewal"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 등급 업그레이드 조건을 검사하고 적용하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.checkAndUpgradeMembership",
      "com.skax.library.service.impl.LoanServiceImpl.getMemberLoanCount"
    ]
  },
  {
    "difficulty": "중",
    "question": "연체 도서 반납 시 자동으로 벌금을 생성하고 회원 상태를 업데이트하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.returnOverdueBook",
      "com.skax.library.service.impl.FineServiceImpl.createFine"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 예약 시 해당 도서가 이미 대출 가능한 상태인지 확인하고 바로 대출 처리하는 로직을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.createReservation",
      "com.skax.library.service.impl.BookServiceImpl.checkBookAvailability"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원별 관심 카테고리 설정 및 관련 도서 추천 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.updatePreferredCategories",
      "com.skax.library.service.impl.BookServiceImpl.getBooksByCategories"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 대출 기록을 분석하여 월별 대출 통계를 생성하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.generateMonthlyStatistics",
      "com.skax.library.repository.LoanRepository"
    ]
  },
  {
    "difficulty": "중",
    "question": "카테고리 계층 구조를 관리하는 트리 형태의 데이터 구조와 관련 API를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.buildCategoryTree",
      "com.skax.library.controller.CategoryController.getCategoryTree"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서관 전체 시스템에 대한 백업 및 복구 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.service.impl.MemberServiceImpl",
      "com.skax.library.config.BackupRecoveryConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "동일 저자의 다른 도서를 추천하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.getBooksByAuthor",
      "com.skax.library.controller.BookController.getBooksFromSameAuthor"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 대출 이력을 기반으로 인기 도서를 추천하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.getPopularBooks",
      "com.skax.library.service.impl.BookServiceImpl.getBookRecommendations"
    ]
  },
  {
    "difficulty": "상",
    "question": "복수의 도서를 한 번에 대출하고 반납하는 일괄 처리 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.controller.LoanController"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 상태(분실, 파손 등)를 관리하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.updateBookStatus",
      "com.skax.library.controller.BookController.reportBookStatus"
    ]
  },
  {
    "difficulty": "하",
    "question": "Category 엔티티에 생성일자 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Category"
    ]
  },
  {
    "difficulty": "하",
    "question": "BookService에 중복 도서 체크 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.checkDuplicateBook"
    ]
  },
  {
    "difficulty": "하",
    "question": "MemberController에 회원 로그인 API를 구현해줘",
    "answer": [
      "com.skax.library.controller.MemberController.login"
    ]
  },
  {
    "difficulty": "하",
    "question": "ReservationService에 회원별 예약 목록 조회 메서드를 추가해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.getReservationsByMember"
    ]
  },
  {
    "difficulty": "하",
    "question": "FineService에 벌금 면제 처리 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.FineServiceImpl.exemptFine"
    ]
  },
  {
    "difficulty": "하",
    "question": "LoanController에 특정 도서의 대출 이력 조회 API를 추가해줘",
    "answer": [
      "com.skax.library.controller.LoanController.getBookLoanHistory"
    ]
  },
  {
    "difficulty": "하",
    "question": "Book 엔티티에 별점 평가 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Book"
    ]
  },
  {
    "difficulty": "하",
    "question": "CategoryService에 연관 카테고리 추천 메서드를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.CategoryServiceImpl.getRelatedCategories"
    ]
  },
  {
    "difficulty": "하",
    "question": "Member 엔티티에 마지막 로그인 일자 필드를 추가해줘",
    "answer": [
      "com.skax.library.model.Member"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 예약과 대출 시 알림 메시지를 발송하는 통합 알림 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl",
      "com.skax.library.service.impl.LoanServiceImpl.createLoan"
    ]
  },
  {
    "difficulty": "중",
    "question": "카테고리별 도서 대출 통계 및 시각화 기능을 추가해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.getLoanStatsByCategory",
      "com.skax.library.controller.CategoryController.getLoanStatistics"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 검색 시 대출 및 예약 정보도 함께 제공하는 API를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl.getMemberWithDetails",
      "com.skax.library.controller.MemberController.getMemberDetails"
    ]
  },
  {
    "difficulty": "중",
    "question": "특정 시간에 자동으로 실행되는 도서 반납 알림 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.sendReturnReminders",
      "com.skax.library.config.SchedulingConfig"
    ]
  },
  {
    "difficulty": "상",
    "question": "회원 활동 로그와 도서 이용 패턴을 분석하여 맞춤형 서비스를 제공하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl",
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.config.AnalyticsConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 예약 가능 수량에 제한을 두고 초과 시 대기 리스트로 관리하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.ReservationServiceImpl.createReservation",
      "com.skax.library.service.impl.BookServiceImpl.checkReservationLimit"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 반납 시 다음 예약자에게 자동으로 알림을 보내고 일정 시간 예약을 유지하는 기능을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.returnBook",
      "com.skax.library.service.impl.ReservationServiceImpl.notifyNextReservation"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서관 시스템 전체에 대한 접근 권한과 역할 기반 인증 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.MemberServiceImpl",
      "com.skax.library.controller.MemberController",
      "com.skax.library.config.SecurityConfig"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서 추천, 대출, 반납을 위한 QR 코드 기반 모바일 인터페이스를 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.service.impl.LoanServiceImpl",
      "com.skax.library.config.QRCodeConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "회원 대출 패턴을 분석하여 도서관 재고 계획에 반영하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.analyzeBorrowingPatterns",
      "com.skax.library.service.impl.BookServiceImpl.suggestInventoryUpdates"
    ]
  },
  {
    "difficulty": "중",
    "question": "카테고리 및 태그 기반 도서 검색 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.searchBooksByTags",
      "com.skax.library.controller.BookController.advancedSearch"
    ]
  },
  {
    "difficulty": "상",
    "question": "외부 도서 API와 연동하여 도서 정보를 자동으로 업데이트하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.repository.BookRepository",
      "com.skax.library.config.ExternalApiConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "대출 기간 만료 시 자동 연장 또는 연체료 부과를 회원 등급에 따라 처리하는 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.LoanServiceImpl.handleDueLoans",
      "com.skax.library.service.impl.MemberServiceImpl.getMemberTier"
    ]
  },
  {
    "difficulty": "상",
    "question": "도서관 전체 업무 프로세스를 마이크로서비스 아키텍처로 전환하는 시스템을 설계해줘",
    "answer": [
      "com.skax.library.config.ServiceConfig",
      "com.skax.library.service.impl.BookServiceImpl",
      "com.skax.library.config.MessageQueueConfig"
    ]
  },
  {
    "difficulty": "중",
    "question": "도서 상태 및 재고 수량을 실시간으로 모니터링하는 대시보드 시스템을 구현해줘",
    "answer": [
      "com.skax.library.service.impl.BookServiceImpl.getInventoryStatus",
      "com.skax.library.controller.BookController.getInventoryDashboard"
    ]
  }
]
