---
description: 
globs: 
alwaysApply: true
---
# RAG 마이크로서비스 아키텍처 가이드

## 🎯 프로젝트 개요
RAG(Retrieval-Augmented Generation) 시스템을 위한 마이크로서비스 아키텍처에서 각 서비스별 일관성 있는 디렉토리 구조와 개발 규칙을 정의합니다.

## 🏗️ 전체 프로젝트 구조

```
codev-rag-server/
├── embedding-server/           ← 임베딩 생성 서비스
│   ├── app/
│   │   ├── features/
│   │   ├── core/
│   │   ├── db/
│   │   └── main.py
│   ├── tests/
│   ├── Dockerfile
│   └── requirements.txt
├── llm-server/                 ← LLM 추론 서비스
│   ├── app/
│   │   ├── features/
│   │   ├── core/
│   │   ├── db/
│   │   └── main.py
│   ├── tests/
│   ├── Dockerfile
│   └── requirements.txt
├── rag-server/                 ← RAG 오케스트레이션 서비스
│   ├── app/
│   │   ├── features/
│   │   ├── core/
│   │   ├── db/
│   │   └── main.py
│   ├── tests/
│   ├── Dockerfile
│   └── requirements.txt
├── vector-db/                  ← 벡터 데이터베이스 설정
│   └── config/
├── docker-compose.yml
├── docker-compose.dev.yml
└── README.md
```

## 📦 각 서비스별 디렉토리 구조

모든 FastAPI 서비스(`embedding-server`, `llm-server`, `rag-server`)는 동일한 내부 구조를 가져야 합니다:

```
{service-name}/
├── app/
│   ├── features/             ← 모든 비즈니스 기능을 포함하는 패키지
│   │   ├── <feature>/        ← 도메인 또는 기능명
│   │   │   ├── router.py     ← API 라우터
│   │   │   ├── service.py    ← 비즈니스 로직
│   │   │   ├── schema.py     ← 요청/응답 Pydantic 스키마
│   │   │   ├── model.py      ← ORM 모델 (필요시)
│   │   │   ├── repository.py ← DB 접근 로직 (필요시)
│   │   │   └── __init__.py
│   │   └── __init__.py       ← Features 패키지 초기화
│   ├── core/                 ← 설정, 보안, 의존성 주입
│   ├── db/                   ← DB 초기화 및 session (필요시)
│   └── main.py               ← FastAPI app entrypoint
├── tests/                    ← 서비스별 테스트
│   ├── unit/
│   ├── integration/
│   └── conftest.py
├── Dockerfile                ← 컨테이너 빌드 설정
└── requirements.txt          ← Python 의존성
```

## 🛠 파일별 구조 규칙

### Router 파일 (`{service}/app/features/**/router.py`)
- **필수 포함**: FastAPI APIRouter 인스턴스
- **표준 구조**:
```python
from fastapi import APIRouter

router = APIRouter(prefix="/api/v1", tags=["feature-name"])

@router.get("/endpoint")
async def endpoint_function():
    pass
```

### Service 파일 (`{service}/app/features/**/service.py`)
- **역할**: 비즈니스 로직 처리 및 외부 서비스 호출
- **필수 포함**: 하나 이상의 서비스 함수 또는 클래스
- **표준 구조**:
```python
from typing import Optional
import httpx

class FeatureService:
    def __init__(self):
        self.external_client = httpx.AsyncClient()
    
    async def process(self, data: dict) -> dict:
        # 비즈니스 로직 구현
        pass
```

### Schema 파일 (`{service}/app/features/**/schema.py`)
- **역할**: 요청/응답 데이터 검증 및 서비스 간 통신 스키마
- **필수 포함**: Pydantic BaseModel
- **표준 구조**:
```python
from pydantic import BaseModel
from typing import List, Optional

class RequestSchema(BaseModel):
    pass

class ResponseSchema(BaseModel):
    pass
```

### Main 파일 (`{service}/app/main.py`)
- **역할**: FastAPI 애플리케이션 진입점
- **필수 포함**: FastAPI 인스턴스와 라우터 등록
- **표준 구조**:
```python
from fastapi import FastAPI
from app.features.feature_name.router import router as feature_router

app = FastAPI(
    title="{Service Name} API",
    description="{Service description}",
    version="1.0.0"
)

app.include_router(feature_router)

@app.get("/")
async def root():
    return {"service": "{service-name}", "status": "running"}
```

## ✅ 마이크로서비스 개발 규칙

### 1. 서비스별 독립성 유지
- 각 서비스는 독립적으로 배포 가능해야 함
- 서비스 간 통신은 HTTP API를 통해서만 진행
- 공유 데이터베이스 금지 (서비스별 독립적 데이터 저장소)

### 2. 공통 네이밍 컨벤션
- Features 디렉토리명: 소문자, 언더스코어 사용
- 파일명: 표준 파일명 사용 (`router.py`, `service.py` 등)
- 클래스명: PascalCase (예: `EmbeddingService`)
- 함수명: snake_case (예: `generate_embedding`)

### 3. 서비스 간 통신 패턴
```python
# app/core/http_client.py
import httpx
from app.core.config import settings

class ServiceClient:
    def __init__(self):
        self.embedding_client = httpx.AsyncClient(base_url=settings.EMBEDDING_SERVER_URL)
        self.llm_client = httpx.AsyncClient(base_url=settings.LLM_SERVER_URL)
        self.vector_client = httpx.AsyncClient(base_url=settings.VECTOR_DB_URL)
```

### 4. 환경 설정 관리
각 서비스는 독립적인 환경 설정을 가져야 합니다:
```python
# app/core/config.py
from pydantic import BaseSettings

class Settings(BaseSettings):
    # 서비스 기본 설정
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    
    # 외부 서비스 URL
    EMBEDDING_SERVER_URL: str = "http://embedding-server:8001"
    LLM_SERVER_URL: str = "http://llm-server:8002"
    VECTOR_DB_URL: str = "http://vector-db:6333"
    
    class Config:
        env_file = ".env"
```

### 5. 헬스체크 표준화
모든 서비스는 동일한 헬스체크 인터페이스를 제공해야 합니다:
```python
@router.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "{service-name}",
        "timestamp": datetime.utcnow()
    }
```

## 🐳 Docker 설정 규칙

### 1. 표준 Dockerfile
모든 서비스는 동일한 Dockerfile 패턴을 사용:
```dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app/ ./app/

EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 2. 서비스별 포트 할당
- embedding-server: 8001
- llm-server: 8002  
- rag-server: 8000
- vector-db: 6333

## 🧪 테스트 구조 규칙

### ⚠️ **중요: 모든 테스트는 Docker Compose 환경에서 실행!**

**마이크로서비스 간 통신이 있는 테스트는 반드시 Docker Compose 환경에서 실행해야 합니다.**

각 서비스는 독립적인 테스트 구조를 가져야 합니다:
```
{service}/tests/
├── unit/                     ← 단위 테스트
│   ├── features/
│   │   └── test_{feature}.py
│   └── core/
├── integration/              ← 통합 테스트 (서비스 간 통신)
│   └── test_service_integration.py
├── e2e/                      ← End-to-End 테스트
│   └── test_api_workflows.py
└── conftest.py              ← 공통 fixture
```

### Docker 기반 테스트 실행 방법

```bash
# 1. Docker Compose로 모든 서비스 실행
docker-compose -f docker-compose.dev.yml up -d

# 2. 서비스들이 준비될 때까지 대기
sleep 30

# 3. 테스트 실행
docker-compose exec rag-server pytest tests/
docker-compose exec embedding-server pytest tests/
docker-compose exec llm-server pytest tests/

# 4. 환경 정리
docker-compose -f docker-compose.dev.yml down -v
```

자세한 내용은 [Docker 테스트 가이드](mdc:.cursor/rules/docker-testing-guide.mdc)를 참조하세요.

## 💡 개발 팁

1. **서비스 템플릿 활용**: 새로운 서비스 추가 시 기존 구조를 참고하여 일관성 유지
2. **API 버전 관리**: 모든 엔드포인트에 `/api/v1` prefix 사용
3. **로깅 표준화**: 모든 서비스에서 동일한 로깅 포맷 사용
4. **모니터링**: 각 서비스의 성능 및 상태 모니터링 구현
5. **문서화**: 서비스별 API 문서 자동 생성 및 유지

이 규칙들을 따르면 확장 가능하고 유지보수 가능한 마이크로서비스 아키텍처를 구축할 수 있습니다.
