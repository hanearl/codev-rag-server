---
description: 
globs: 
alwaysApply: true
---
# 데이터베이스 패턴 및 SQLAlchemy 가이드

## 🗄️ 데이터베이스 구조 패턴

### 1. 기본 설정 (`app/db/database.py`)
```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

engine = create_engine(settings.DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

### 2. 모델 정의 규칙 (`app/features/**/model.py`)

#### 기본 모델 구조
```python
from sqlalchemy import Column, Integer, String, DateTime, Boolean
from sqlalchemy.sql import func
from app.db.database import Base

class User(Base):
    __tablename__ = "users"
    
    # 기본 필드
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    is_active = Column(Boolean, default=True)
    
    # 비즈니스 필드
    name = Column(String, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
```

#### 관계 정의
```python
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # 1:N 관계
    posts = relationship("Post", back_populates="author")

class Post(Base):
    __tablename__ = "posts"
    
    id = Column(Integer, primary_key=True, index=True)
    author_id = Column(Integer, ForeignKey("users.id"))
    
    # 관계 정의
    author = relationship("User", back_populates="posts")
```

## 🔧 Repository 패턴 구현

### 1. 기본 Repository 클래스 (`app/core/repository.py`)
```python
from typing import Generic, TypeVar, Type, Optional, List
from sqlalchemy.orm import Session
from app.db.database import Base

ModelType = TypeVar("ModelType", bound=Base)

class BaseRepository(Generic[ModelType]):
    def __init__(self, model: Type[ModelType]):
        self.model = model
    
    def get(self, db: Session, id: int) -> Optional[ModelType]:
        return db.query(self.model).filter(self.model.id == id).first()
    
    def get_multi(self, db: Session, *, skip: int = 0, limit: int = 100) -> List[ModelType]:
        return db.query(self.model).offset(skip).limit(limit).all()
    
    def create(self, db: Session, *, obj_in: dict) -> ModelType:
        db_obj = self.model(**obj_in)
        db.add(db_obj)
        db.commit()
        db.refresh(db_obj)
        return db_obj
    
    def update(self, db: Session, *, db_obj: ModelType, obj_in: dict) -> ModelType:
        for field, value in obj_in.items():
            setattr(db_obj, field, value)
        db.add(db_obj)
        db.commit()
        db.refresh(db_obj)
        return db_obj
    
    def remove(self, db: Session, *, id: int) -> ModelType:
        obj = db.query(self.model).get(id)
        db.delete(obj)
        db.commit()
        return obj
```

### 2. 특화된 Repository (`app/features/**/repository.py`)
```python
from typing import Optional
from sqlalchemy.orm import Session
from app.core.repository import BaseRepository
from app.features.users.model import User

class UserRepository(BaseRepository[User]):
    def __init__(self):
        super().__init__(User)
    
    def get_by_email(self, db: Session, *, email: str) -> Optional[User]:
        return db.query(User).filter(User.email == email).first()
    
    def get_active_users(self, db: Session) -> List[User]:
        return db.query(User).filter(User.is_active == True).all()

user_repository = UserRepository()
```

## 📊 쿼리 최적화 패턴

### 1. Eager Loading 사용
```python
from sqlalchemy.orm import joinedload

def get_user_with_posts(db: Session, user_id: int) -> Optional[User]:
    return db.query(User)\
        .options(joinedload(User.posts))\
        .filter(User.id == user_id)\
        .first()
```

### 2. 페이지네이션 구현
```python
from sqlalchemy import func
from typing import Tuple

def get_users_paginated(
    db: Session, 
    page: int = 1, 
    size: int = 10
) -> Tuple[List[User], int]:
    total = db.query(func.count(User.id)).scalar()
    
    users = db.query(User)\
        .offset((page - 1) * size)\
        .limit(size)\
        .all()
    
    return users, total
```

### 3. 복잡한 쿼리 예시
```python
from sqlalchemy import and_, or_, desc

def search_users(
    db: Session,
    search_term: Optional[str] = None,
    is_active: Optional[bool] = None
) -> List[User]:
    query = db.query(User)
    
    # 조건부 필터링
    if search_term:
        query = query.filter(
            or_(
                User.name.ilike(f"%{search_term}%"),
                User.email.ilike(f"%{search_term}%")
            )
        )
    
    if is_active is not None:
        query = query.filter(User.is_active == is_active)
    
    return query.order_by(desc(User.created_at)).all()
```

## 🏗️ 마이그레이션 관리 (Alembic)

### 1. 초기 설정 (`alembic.ini` 및 `alembic/env.py`)
```python
# alembic/env.py
from app.db.database import Base
from app.features.users.model import User  # 모든 모델 import
from app.features.items.model import Item
# ... 다른 모델들

target_metadata = Base.metadata
```

### 2. 마이그레이션 생성 규칙
```bash
# 마이그레이션 생성
alembic revision --autogenerate -m "Add users table"

# 마이그레이션 적용
alembic upgrade head

# 특정 리비전으로 다운그레이드
alembic downgrade -1
```

### 3. 마이그레이션 파일 명명 규칙
- `YYYY_MM_DD_HHMM_description.py` 형식 사용
- 예: `2024_01_15_1400_add_users_table.py`

## 🔒 데이터베이스 보안 패턴

### 1. SQL 인젝션 방지
```python
# ❌ 잘못된 방법
def get_user_by_name(db: Session, name: str):
    return db.execute(f"SELECT * FROM users WHERE name = '{name}'")

# ✅ 올바른 방법
def get_user_by_name(db: Session, name: str):
    return db.query(User).filter(User.name == name).first()
```

### 2. 민감한 데이터 처리
```python
from sqlalchemy_utils import PasswordType, force_auto_coercion

force_auto_coercion()

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True)
    email = Column(String, unique=True, nullable=False)
    # 비밀번호 자동 해싱
    password = Column(PasswordType(schemes=['pbkdf2_sha512']))
```

## 🧪 데이터베이스 테스팅

### 1. 테스트 데이터베이스 설정 (`tests/conftest.py`)
```python
import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.db.database import Base, get_db
from app.main import app

SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture
def db():
    Base.metadata.create_all(bind=engine)
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()
        Base.metadata.drop_all(bind=engine)

@pytest.fixture
def client(db):
    def override_get_db():
        try:
            yield db
        finally:
            db.close()
    
    app.dependency_overrides[get_db] = override_get_db
    yield TestClient(app)
    del app.dependency_overrides[get_db]
```

### 2. Repository 테스트 예시
```python
def test_create_user(db):
    user_data = {
        "name": "Test User",
        "email": "test@example.com"
    }
    
    user = user_repository.create(db, obj_in=user_data)
    
    assert user.name == "Test User"
    assert user.email == "test@example.com"
    assert user.id is not None
```

## 📈 성능 모니터링

### 1. 쿼리 로깅 설정
```python
import logging

# SQLAlchemy 쿼리 로깅 활성화
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
```

### 2. 연결 풀 설정
```python
from sqlalchemy import create_engine

engine = create_engine(
    DATABASE_URL,
    pool_size=10,           # 기본 연결 수
    max_overflow=20,        # 추가 연결 수
    pool_pre_ping=True,     # 연결 상태 확인
    pool_recycle=3600       # 연결 재활용 시간(초)
)
```

이러한 패턴들을 따르면 확장 가능하고 유지보수 가능한 데이터베이스 계층을 구현할 수 있습니다.
